#include <iostream>
#include <map>
#include <string>
#include <vector>
#include <limits>
#include <iomanip>
#include <fstream> // For saving receipt to file
#include <thread>  // For simulated background effect
#include <chrono>  // For adding delays

using namespace std;

// ANSI Color Codes
#define RESET   "\033[0m"
#define BOLD    "\033[1m"
#define UNDERLINE "\033[4m"
#define BLACK   "\033[30m"
#define RED     "\033[31m"
#define GREEN   "\033[32m"
#define YELLOW  "\033[33m"
#define BLUE    "\033[34m"
#define MAGENTA "\033[35m"
#define CYAN    "\033[36m"
#define WHITE   "\033[37m"

// Structure to represent a food item with size-based pricing
struct FoodItem {
    string name;
    map<string, double> sizes; // Sizes and their prices
    int quantity;
};

// Structure to represent an order item for the receipt
struct OrderItem {
    string name;
    string size;
    int quantity;
    double totalPrice;
};

// Function to simulate a loading effect for the title
void simulateLoading() {
    const string title = "Welcome to Echo Food Hub";
    for (const char &ch : title) {
        cout << ch << flush;
        this_thread::sleep_for(chrono::milliseconds(50));
    }
    cout << endl;
}

// Function to print a receipt
void printReceipt(const vector<OrderItem> &receipt, double totalCost, bool saveToFile = false) {
    double discount = (totalCost > 1000) ? totalCost * 0.10 : 0; // 10% discount for orders above ₱1000
    double finalCost = totalCost - discount;

    cout << "\n" << GREEN << "=================================" << RESET << endl;
    cout << YELLOW << "              RECEIPT            " << RESET << endl;
    cout << GREEN << "=================================" << RESET << endl;
    cout << left << setw(12) << "Item" 
         << setw(8) << "Size" 
         << setw(10) << "Quantity" 
         << "Price" << endl;
    cout << "---------------------------------" << endl;
    for (const auto &item : receipt) {
        cout << left << setw(12) << item.name 
             << setw(8) << item.size 
             << setw(10) << item.quantity 
             << "₱" << fixed << setprecision(2) << item.totalPrice << endl;
    }
    cout << "---------------------------------" << endl;
    if (discount > 0) {
        cout << "Discount: ₱" << fixed << setprecision(2) << discount << endl;
    }
    cout << right << setw(25) << "Total: ₱" << fixed << setprecision(2) << finalCost << endl;
    cout << GREEN << "=================================" << RESET << endl;

    // Optionally save receipt to a file
    if (saveToFile) {
        ofstream receiptFile("receipt.txt");
        if (receiptFile.is_open()) {
            receiptFile << "=================================\n";
            receiptFile << "              RECEIPT            \n";
            receiptFile << "=================================\n";
            receiptFile << left << setw(12) << "Item" 
                        << setw(8) << "Size" 
                        << setw(10) << "Quantity" 
                        << "Price\n";
            receiptFile << "---------------------------------\n";
            for (const auto &item : receipt) {
                receiptFile << left << setw(12) << item.name 
                            << setw(8) << item.size 
                            << setw(10) << item.quantity 
                            << "₱" << fixed << setprecision(2) << item.totalPrice << endl;
            }
            receiptFile << "---------------------------------\n";
            if (discount > 0) {
                receiptFile << "Discount: ₱" << fixed << setprecision(2) << discount << "\n";
            }
            receiptFile << right << setw(25) << "Total: ₱" << fixed << setprecision(2) << finalCost << "\n";
            receiptFile << "=================================\n";
            receiptFile.close();
            cout << GREEN << "\n✔️ Receipt saved to 'receipt.txt'." << RESET << endl;
        }
    }
}

// Function to display the menu
void displayMenu(const map<string, FoodItem> &menu) {
    cout << "\n" << GREEN << "=================================" << RESET << endl;
    cout << YELLOW << "           ECHO FOOD HUB         " << RESET << endl;
    cout << GREEN << "=================================" << RESET << endl;
    cout << CYAN << "Today's Menu (Prices are in ₱):" << RESET << endl;
    cout << "---------------------------------" << endl;
    for (const auto &pair : menu) {
        cout << pair.first << " (Available: " << pair.second.quantity << ")\n";
        for (const auto &size : pair.second.sizes) {
            cout << "  " << size.first << ": ₱" << size.second << endl;
        }
        cout << "---------------------------------" << endl;
    }
    cout << GREEN << "=================================" << RESET << endl;
}

int main() {
    // Food menu with sizes and prices
    map<string, FoodItem> menu = {
        {"Burger", {"Burger", {{"Small", 199.00}, {"Medium", 299.00}, {"Large", 399.00}}, 10}},
        {"Pizza", {"Pizza", {{"Small", 299.00}, {"Medium", 499.00}, {"Large", 699.00}}, 7}},
        {"Fries", {"Fries", {{"Small", 99.00}, {"Medium", 149.00}, {"Large", 199.00}}, 20}},
        {"Coke", {"Coke", {{"Small", 49.00}, {"Medium", 79.00}, {"Large", 99.00}}, 30}},
        {"Taho", {"Taho", {{"Small", 99.00}, {"Medium", 199.00}, {"Large", 299.00}}, 15}},
        {"Kiss", {"Kiss", {{"Saglit", 0.00}, {"Matagal", 0.00}, {"Unlimited", 0.00}}, 100}},
        {"Hug", {"Hug", {{"Saglit", 0.00}, {"Matagal", 0.00}, {"Unlimited", 0.00}}, 100}},
        {"Rice", {"Rice", {{"Solo", 25.00}, {"Half", 50.00}, {"Unlimited", 99.00}}, 100000}},
        
    };

    // Simulate a loading effect
    cout << GREEN;
    simulateLoading();
    cout << RESET;

    // Display the menu
    displayMenu(menu);

    string order, size;
    double totalCost = 0;
    int quantityOrdered;
    char anotherItem;
    vector<OrderItem> receipt; // To store ordered items for the receipt

    do {
        cout << "\n" << CYAN << "Enter the name of the food item you want to order (or type 'done' to finish): " << RESET;
        cin >> order;

        auto it = menu.find(order);
        if (it != menu.end()) {
            // Ask for size
            cout << "\n" << CYAN << "Available sizes for " << order << ":\n" << RESET;
            for (const auto &sizeOption : it->second.sizes) {
                cout << "  " << sizeOption.first << ": ₱" << sizeOption.second << endl;
            }

            cout << "\n" << CYAN << "Enter the size you want (Small/Medium/Large): " << RESET;
            cin >> size;

            if (it->second.sizes.count(size) == 0) {
                cout << RED << "Invalid size. Please choose from Small, Medium, or Large." << RESET << endl;
                continue;
            }

            // Ask for quantity
            cout << CYAN << "Enter the quantity you want to order: " << RESET;
            cin >> quantityOrdered;

            if (cin.fail() || quantityOrdered <= 0 || quantityOrdered > it->second.quantity) {
                cout << RED << "Invalid quantity. Please enter a positive number less than or equal to available quantity (" << it->second.quantity << ")." << RESET << endl;
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                continue;
            }

            double itemCost = it->second.sizes[size] * quantityOrdered;
            totalCost += itemCost;
            it->second.quantity -= quantityOrdered; // Update quantity
            receipt.push_back({order, size, quantityOrdered, itemCost}); // Add to receipt
            cout << GREEN << "\n✔️ " << quantityOrdered << " " << size << " " << order 
                 << "(s) added to your order. Current total: ₱" 
                 << fixed << setprecision(2) << totalCost << RESET << endl;
        } else if (order != "done") {
            cout << RED << "❌ Sorry, we don't have " << order << " on the menu." << RESET << endl;
        }

        if (order != "done") {
            cout << CYAN << "\nDo you want to add another item? (y/n): " << RESET;
            cin >> anotherItem;
        }
    } while (order != "done" && anotherItem == 'y');

    // Print the final receipt
    printReceipt(receipt, totalCost, true);

    // Simulate payment
    double payment = 0.0;
    do {
        cout << "\n" << CYAN << "Enter payment amount: ₱" << RESET;
        cin >> payment;
        if (payment < totalCost) {
            cout << RED << "❌ Insufficient payment. Please pay at least ₱" << fixed << setprecision(2) << totalCost << RESET << endl;
        }
    } while (payment < totalCost);

    cout << GREEN << "Change: ₱" << fixed << setprecision(2) << payment - totalCost << RESET << endl;

    cout << "\n" << YELLOW << "Thank you for visiting Echo Food Hub!" << RESET << endl;

    return 0;
}
